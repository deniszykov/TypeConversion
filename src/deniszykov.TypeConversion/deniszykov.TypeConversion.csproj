<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFrameworks>$(NetTargetPlatforms);</TargetFrameworks>
		<Description>Type conversion provider.</Description>
		<PackageReleaseNotes># 3.0.6
refac: renamed TypeConversionProviderConfiguration to TypeConversionProviderOptions
refac: renamed ConversionMetadataProviderConfiguration into ConversionMetadataProviderOptions to conform .NET Core configuration conversion.
feature: added type promotion function for value with ConversionOptions.PromoteValueToActualType
fix: fixed TargetInvocationException instead of actual error is thrown when some conversion failed and OptimizeWithExpressions is disabled in config.

# 3.0.5
refac: removed extra constructor TypeConversionProvider to prevent DI constructor confusion.
fix: fixed null to any ref type conversion error.

# 3.0.4
refac: deprecated TypeConversionProviderConfiguration.RegisterConversion in favor of TypeConversionProvider constructor injection.
feature: added TypeConversionProviderConfiguration.DebugPrintConversions for debug purposes.

# 3.0.3
feature: added additional way to configure new conversions between types via constructor. This way allow service resolution for such conversions. Type need to be registered in DI ICustomConversionRegistration and services could be injected in implementation constructor.

# 3.0.2

fix: fixed usage of dynamic methods in EnumConversionInfo (frag was checked wrongly)
feature: added compatibility shim for old 'TypeConvert' package

# 3.0.0
			- renamed project to `deniszykov.TypeConversion`
			- removed HexConvert, Base64Convert, TypeActivator
			- refactored TypeConvert to `ITypeConversionProvider` abstraction and `TypeConversionProvider` implementation
			- added configurable behaviour via `TypeConversionProviderConfiguration` and `IConversionMetadataProvider`
			- renamed `EnumHelper` to EnumConversionInfo and made it instantiable class instead of static class.
		</PackageReleaseNotes>
	</PropertyGroup>
	<ItemGroup>
		<PackageReference Include="System.Runtime.Serialization.Primitives" Version="4.3.0" Condition=" '$(TargetFramework)' == '$(NetStandardBottomTarget)' " />
		<PackageReference Include="Microsoft.Extensions.Options" Version="1.1.2" Condition=" '$(TargetFramework)' == '$(NetStandardBottomTarget)' " />
		<PackageReference Include="Microsoft.Extensions.Options" Version="5.0.0" Condition=" '$(TargetFramework)' == '$(NetFrameworkTopTarget)' " />
		<PackageReference Include="Microsoft.Extensions.Options" Version="3.1.10" Condition=" '$(TargetFramework)' == '$(NetStandardTopTarget)' or '$(TargetFramework)' == '$(NetCoreAppBottomTarget)'  or '$(TargetFramework)' == '$(NetCoreAppTopTarget)'" />
	</ItemGroup>
	<ItemGroup>
		<None Update="NativeConversions.tt">
			<Generator>TextTemplatingFileGenerator</Generator>
			<LastGenOutput>NativeConversions.cs</LastGenOutput>
		</None>
	</ItemGroup>
	<ItemGroup>
		<Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
	</ItemGroup>
	<ItemGroup>
		<Compile Update="NativeConversions.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>NativeConversions.tt</DependentUpon>
		</Compile>
	</ItemGroup>
	<PropertyGroup>
		<DefineConstants>$(DefineConstants);ENUM_HELPER;NATIVE_CONVERSIONS;TYPE_ACTIVATOR</DefineConstants>
		<PackageTags>type conversion, convert</PackageTags>
	</PropertyGroup>
</Project>